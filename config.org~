
* Personal information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Štěpán Křivanec"
      user-mail-address "stepan.krivanec@gmail.com")
#+END_SRC
* startup message & empty scratch
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message "")
#+END_SRC
* Customize settings
Set up the customize file to its own separate file, instead of saving customize settings in init.el.
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC
* UTF-8
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
(set-charset-priority 'unicode)
#+END_SRC
* Org-mode
** forbid invisible edits
#+BEGIN_SRC emacs-lisp
(setq org-catch-invisible-edits 'error) ;now I can't edit invisible text. C-c C-r (org-reveal) will display where the point is if it is buried in invisible text to allow editing again.
#+END_SRC
** enabling speed keys
#+BEGIN_SRC emacs-lisp
(setq org-use-speed-commands t)
#+END_SRC
** export settings
#+BEGIN_SRC emacs-lisp
; UTF-8 as the default coding systerm for all org files:
(setq org-export-coding-system 'utf-8)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+END_SRC
** Org babel languanges
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (scheme . t)
   (sh . t)
   (sqlite . t)
   (js . t)))
#+END_SRC
** Org babel/source blocks
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+END_SRC
** indented headings
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC
* Helm-mode
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :init (progn
          (require 'helm-config)
          (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
              helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
              helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
              helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
              helm-ff-file-name-history-use-recentf t)
          (helm-mode))
  :bind (("C-c h" . helm-command-prefix)
         ("C-x b" . helm-mini)
         ("C-`" . helm-resume)
         ("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)))
#+END_SRC
* Avy
[[https://github.com/abo-abo/avy][avy]] is a GNU Emacs package for jumping to visible text using a char-based decision tree.

#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind
  ("C-:" . avy-goto-char)
  ("C-'" . avy-goto-char-2)
  ("M-g f" . avy-goto-line))
#+END_SRC
** TODO C-'
conflicts with  org-cycle-agenda-files
* guide-key
#+BEGIN_SRC emacs-lisp
(use-package guide-key
  :ensure t
  :init
  (setq guide-key/guide-key-sequence '("C-x" "C-c" "C-c h"))
  (guide-key-mode 1))
#+END_SRC
* Blinking cursor
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode -1)
#+END_SRC

* Turn off mouse interface

#+BEGIN_SRC emacs-lisp
(when window-system
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1))
#+END_SRC

* input settings
#+BEGIN_SRC emacs-lisp
(setq default-input-method "czech-qwerty")
#+END_SRC

* Themes
this i grabbed in  [[https://github.com/danielmai/.emacs.d/blob/master/config.org][Daniel May's config]]

** Cyberpunk theme
#+BEGIN_SRC emacs-lisp
(use-package cyberpunk-theme
  :ensure t
  :init
  (progn
    (load-theme 'cyberpunk t)
    (set-face-attribute `mode-line nil
                        :box nil)
    (set-face-attribute `mode-line-inactive nil
                        :box nil)))
#+END_SRC

** Solarized theme
#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :init
  (setq solarized-use-variable-pitch nil)
  :ensure t)
#+END_SRC

** Monokai theme
#+BEGIN_SRC emacs-lisp
(setq monokai-use-variable-pitch nil)
#+END_SRC

** Convenient theme functions
#+BEGIN_SRC emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "M-<f12>" 'switch-theme)
(bind-key "M-<f11>" 'disable-active-themes)
#+END_SRC
* mail

** gnus
I have no idea how this works :( .... so it does not ATM
#+BEGIN_SRC emacs-lisp
(setq gnus-select-method
      '(nnimap "gmail"
               (nnimap-address "imap.gmail.com")
               (nnimap-server-port 993)
               (nnimap-stream ssl)))
#+END_SRC

*** sources
[[http://www.emacswiki.org/emacs/GnusGmail#toc2][EmacsWiki: Gnus Gmail]]
[[https://eschulte.github.io/emacs24-starter-kit/starter-kit-gnus.html][Starter Kit Gnus]]
[[http://www.emacswiki.org/emacs/GnusTutorial][EmacsWiki: Gnus Tutorial]]


* smooth scrolling
#+BEGIN_SRC emacs-lisp
(use-package smooth-scrolling
  :ensure t)
#+END_SRC
